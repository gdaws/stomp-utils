#!/usr/bin/env node

var argv = require('optimist')
    .usage('Usage: $0 [options] uri destination [command arg...]')
    .demand(2)
    .default('v', false)
    .default('k', 'client-individual')
    .boolean('v')
    .alias('H', 'header')
    .alias('d', 'destination')
    .alias('k', 'ack')
    .alias('m', 'max-consume')
    .alias('v', 'verbose')
    .alias('t', 'timeout')
    .describe('H', 'Append header line to subscription frame')
    .describe('k', 'Set subscription ack mode')
    .argv;

var util            = require('util');
var child_process   = require('child_process');
var stompit         = require('stompit');
var appUtil         = require('stompit/lib/util/app_cli').init(argv);

var uri = argv._[0];
var destination = argv._[1];

var messageHandler;

if(argv._.length > 0){
    
    var messageCount = 0;
    var messageCountLimit = null;
    var messagesPending = 0;
    
    if(argv['max-consume']){
        messageCountLimit = argv['max-consume'];
    }
    
    messageHandler = function(message){
        
        var client = this;
        
        if(messageCountLimit !== null && messageCount >= messageCountLimit){
            return;
        }
        
        messageCount += 1;
        messagesPending += 1;
        
        var messageNumber = messageCount;
        var ended = false;
        
        var child = child_process.spawn(argv._[0], argv._.slice(1));
        
        child.on('error', appUtil.fatalErrorEvent('Child process error: %s'));
        
        child.on('exit', function(code){
            
            messagesPending -= 1;
            
            if(!ended || code === null || code !== 0){
                appUtil.log('Failed to consume message');
                message.nack();
            }
            else{
                message.ack();
                appUtil.log('Consumed message');
            }
            
            if(messagesPending === 0 && messageCountLimit !== null && messageNumber >= messageCountLimit){
                client.disconnect();
                return;
            }
        });
        
        message.on('end', function(){
            ended = true;
        });
        
        child.stderr.pipe(process.stderr);
        
        message.pipe(child.stdin);
    };
}
else{
    
    argv.v = false;
    argv.verbose = false;
    
    var messageCount = 0;
    
    messageHandler = function(message){
        
        messageCount += 1;
        
        if(messageCount > 1){
            return;
        }
        
        var client = this;
        
        message.on('end', function(){
            message.ack();
            client.disconnect();
        });
        
        message.pipe(process.stdout);
    };
}

var failover = new stompit.Failover(uri, {
    maxReconnectAttempts: 0
});

failover.connect(function(error, client, reconnect){
    
    if(error){
        appUtil.fatalError(error.message);
        return;
    }
    
    appUtil.log(util.format('Established STOMP %s session with %s', client.headers['version'], client.headers['server'] || 'unnamed server'));
    
    var timeout = null;
    
    client.on('error', function(){
        if(timeout){
            clearTimeout(timeout);
        }
        reconnect();
    });
    
    var headers = {
        'destination': destination,
        'ack': argv.ack
    };
    
    var userDefinedHeaders = {};
    if(argv.header){
        userDefinedHeaders = appUtil.parseHeaderLines(argv.header);
    }
    
    var startTimeout = function(){
        
        if(timeout !== null){
            clearTimeout(timeout);
        }
        
        if(argv.timeout){
            timeout = setTimeout(function(){
                appUtil.log('Idle timeout');
                client.disconnect();
            }, argv.timeout * 1000);
        }
    };
    
    startTimeout();
    
    client.subscribe(util.extend(userDefinedHeaders, headers), function(message){
        message.once('end', startTimeout);
        messageHandler.call(client, message);
    });
});
